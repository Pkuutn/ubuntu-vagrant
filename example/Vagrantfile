require 'base64'
require 'stringio'
require 'zlib'

def gzip_base64(data)
  o = StringIO.new() 
  w = Zlib::GzipWriter.new(o)
  w.write(data)
  w.close()
  Base64.strict_encode64(o.string)
end

Vagrant.configure(2) do |config|
  config.vm.box = 'ubuntu-18.04-amd64'

  config.vm.hostname = 'example'

  config.vm.provider 'libvirt' do |lv, config|
    lv.memory = 2048
    lv.cpus = 2
    lv.cpu_mode = 'host-passthrough'
    lv.nested = true
    lv.keymap = 'pt'
    config.vm.synced_folder '.', '/vagrant', type: 'nfs'
  end

  config.vm.provider 'virtualbox' do |vb|
    vb.linked_clone = true
    vb.memory = 2048
    vb.cpus = 2
  end

  config.vm.provider 'vsphere' do |vsphere, override|
    override.vm.box = 'dummy'
    vsphere.name = ENV['VSPHERE_VM_NAME']
    vsphere.notes = "Created from #{__FILE__}"
    vsphere.cpu_count = 2
    vsphere.memory_mb = 2*1024
    vsphere.user = ENV['GOVC_USERNAME']
    vsphere.password = ENV['GOVC_PASSWORD']
    vsphere.insecure = true
    vsphere.host = ENV['GOVC_HOST']
    vsphere.data_center_name = ENV['GOVC_DATACENTER']
    vsphere.compute_resource_name = ENV['GOVC_CLUSTER']
    vsphere.data_store_name = ENV['GOVC_DATASTORE']
    vsphere.template_name = ENV['VSPHERE_TEMPLATE_NAME']
    vsphere.vm_base_path = ENV['VSPHERE_VM_FOLDER']
    vsphere.vlan = ENV['VSPHERE_VLAN']
    # NB the extra_config data ends-up inside the VM .vmx file.
    # NB the guestinfo properties will be exposed by cloud-init-vmware-guestinfo
    #    as a cloud-init datasource.
    # NB the runcmd output is written to journald and /var/log/cloud-init-output.log.
    # See https://github.com/vmware/cloud-init-vmware-guestinfo
    vsphere.extra_config = {
      'guestinfo.userdata' => gzip_base64(
        <<~DATA
        #cloud-config
        runcmd:
          - echo '************** DONE RUNNING CLOUD-INIT **************'
        DATA
      ),
      'guestinfo.userdata.encoding' => 'gzip+base64',
      # Uncomment the following to set a static IP address.
      # 'guestinfo.metadata' => gzip_base64(
      #   {
      #     'network' => gzip_base64(
      #       <<~DATA
      #       version: 2
      #       ethernets:
      #         eth0:
      #           dhcp4: false
      #           addresses:
      #             - 10.0.0.123/24
      #           gateway4: 10.0.0.1
      #           nameservers:
      #             addresses:
      #               - 10.0.0.1
      #       DATA
      #     ),
      #     'network.encoding': 'gzip+base64',
      #   }.to_json
      # ),
      # 'guestinfo.metadata.encoding' => 'gzip+base64',
    }
  end

  config.vm.provision 'shell', inline: 'cat /etc/os-release'
  config.vm.provision 'shell', inline: 'echo "machine-id is $(cat /etc/machine-id)"'
  config.vm.provision 'shell', inline: 'lsblk -x KNAME -o KNAME,SIZE,TRAN,SUBSYSTEMS,FSTYPE,UUID,LABEL,MODEL,SERIAL'
  config.vm.provision 'shell', inline: 'df -h'
  config.vm.provision 'shell', inline: "dpkg-query -W -f='${binary:Package}\\n' | sort >/vagrant/#{config.vm.box}-packages.txt"
end
